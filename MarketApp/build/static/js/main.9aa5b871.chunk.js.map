{"version":3,"sources":["utils/firebase.js","context/alert/alertContext.js","components/Form.js","components/Alert.js","pages/Settings.js","utils/misc.js","pages/Buys.js","pages/Sells.js","pages/Profits.js","components/Navbar.js","context/types.js","context/alert/alertReducer.js","context/alert/AlertState.js","pages/GeneralInfo.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","AlertContext","createContext","Form","collection","setting","alert","useContext","useState","Number","value","setValue","htmlFor","id","className","description","type","onChange","event","target","onClick","doc","update","then","_","show","catch","Alert","hide","visible","text","aria-label","Settings","globalSettings","setGlobalSettings","buySettings","setBuySettings","orderSettings","setOrderSettings","useEffect","orderBy","onSnapshot","settings","updatedSettings","forEach","settingData","data","settingId","push","percents","percent","index","style","marginBottom","Accordion","defaultActiveKey","Card","Toggle","as","Header","eventKey","Collapse","Body","map","round","num","Math","useStyles","makeStyles","field","width","margin","Buys","classes","nameFilterState","setNameFilterState","buys","setBuys","throttled","useRef","throttle","filter","where","updatedBuys","buy","buyData","buyId","sortedBuys","sort","a","b","date","seconds","current","Divider","variant","display","justifyContent","TextField","label","name","Table","striped","bordered","hover","responsive","itemName","item_name","Date","toLocaleString","priceBuy","price_buy","priceSell","price_sell","priceSellWithCommission","profitInRub","profitInPercent","isSold","sold","color","Sells","sells","setSells","updatedSells","sell","sellData","sellId","sortedSells","Profits","profits","setProfits","generalProfit","setGeneralProfit","moment","subtract","format","datePickerState","setDatePickerState","dateFrom","toDate","dateTo","updatedProfits","toLocaleDateString","profit","totalDays","Object","keys","length","totalProfit","values","reduce","sum","averageProfit","InputLabelProps","shrink","inputProps","max","error","helperText","newState","onKeyDown","preventDefault","min","entries","Navbar","to","exact","SHOW_ALERT","HIDE_ALERT","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","GeneralInfo","buysInfo","setBuysInfo","sellsInfo","setSellsInfo","generalInfo","setGeneralInfo","updatedInfo","totalBuys","todayBuys","totalSells","todaySells","todayProfit","yesterdayProfit","info","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9aa5b871.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DB_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firestore = firebase.firestore();\n","import { createContext } from 'react';\n\nexport const AlertContext = createContext();\n","import React, { useContext, useState } from 'react';\nimport { firestore } from '../utils/firebase';\nimport { AlertContext } from '../context/alert/alertContext';\n\nexport const Form = ({ collection, setting }) => {\n    const alert = useContext(AlertContext);\n    const [value, setValue] = useState(Number(setting.value));\n\n    const updateValue = () => {\n        firestore\n            .collection(collection)\n            .doc(setting.id)\n            .update({\n                value,\n            })\n            .then((_) => alert.show('Успешно обновлено', 'success'))\n            .catch((_) => alert.show('Не удалось обновить', 'danger'));\n    };\n\n    return (\n        <div>\n            <label\n                htmlFor={`input_${collection}_${setting.id}`}\n                className=\"col-sm-12 col-form-label\"\n            >\n                {setting.description}\n            </label>\n            <div className=\"input-group col-sm-12\">\n                <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    id={`input_${collection}_${setting.id}`}\n                    value={value}\n                    onChange={(event) => setValue(Number(event.target.value))}\n                />\n                <button className=\"btn btn-outline-success\" type=\"button\" onClick={updateValue}>\n                    Обновить\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { useContext } from 'react';\nimport { AlertContext } from '../context/alert/alertContext';\n\nexport const Alert = () => {\n    const { alert, hide } = useContext(AlertContext);\n\n    if (!alert.visible) {\n        return null;\n    }\n\n    return (\n        <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\n            {alert.text}\n            <button onClick={hide} type=\"button\" className=\"btn-close\" aria-label=\"Close\" />\n        </div>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Accordion, Card } from 'react-bootstrap';\nimport { firestore } from '../utils/firebase';\nimport { Form } from '../components/Form';\nimport { Alert } from '../components/Alert';\n\nexport const Settings = () => {\n    const [globalSettings, setGlobalSettings] = useState([]);\n    const [buySettings, setBuySettings] = useState([]);\n    const [orderSettings, setOrderSettings] = useState([]);\n\n    useEffect(() => {\n        firestore\n            .collection('global_settings')\n            .orderBy('order')\n            .onSnapshot((settings) => {\n                const updatedSettings = [];\n\n                settings.forEach((setting) => {\n                    const settingData = setting.data();\n                    const settingId = setting.id;\n\n                    updatedSettings.push({ ...settingData, id: settingId });\n                });\n\n                setGlobalSettings(updatedSettings);\n            });\n\n        firestore\n            .collection('buy_settings')\n            .orderBy('order')\n            .onSnapshot((settings) => {\n                const updatedSettings = [];\n\n                settings.forEach((setting) => {\n                    const settingData = setting.data();\n                    const settingId = setting.id;\n                    if (setting.id !== 'minProfitBuy') {\n                        updatedSettings.push({ ...settingData, id: settingId });\n                    } else {\n                        settingData.percents.forEach((percent, index) =>\n                            updatedSettings.push({\n                                description: `Минимальный профит ${percent.description}`,\n                                value: percent.value,\n                                id: `${settingId}_${index}`,\n                            }),\n                        );\n                    }\n                });\n\n                setBuySettings(updatedSettings);\n            });\n\n        firestore\n            .collection('order_settings')\n            .orderBy('order')\n            .onSnapshot((settings) => {\n                const updatedSettings = [];\n\n                settings.forEach((setting) => {\n                    const settingData = setting.data();\n                    const settingId = setting.id;\n\n                    if (setting.id !== 'minProfitOrder') {\n                        updatedSettings.push({ ...settingData, id: settingId });\n                    } else {\n                        settingData.percents.forEach((percent, index) =>\n                            updatedSettings.push({\n                                description: `Минимальный профит ${percent.description}`,\n                                value: percent.value,\n                                id: `${settingId}_${index}`,\n                            }),\n                        );\n                    }\n                });\n\n                setOrderSettings(updatedSettings);\n            });\n    }, []);\n\n    return (\n        <div>\n            <h1\n                className=\"text-center\"\n                style={{\n                    marginBottom: '20px',\n                }}\n            >\n                Настройки\n            </h1>\n\n            <Alert />\n\n            <Accordion defaultActiveKey=\"0\" className=\"settings\">\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                        Общие настройки\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                            {globalSettings.map((setting) => (\n                                <Form\n                                    setting={setting}\n                                    collection=\"global_settings\"\n                                    key={`global_settings_${setting.id}`}\n                                />\n                            ))}\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                        Настройки покупки\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"1\">\n                        <Card.Body>\n                            {buySettings.map((setting) => (\n                                <Form\n                                    setting={setting}\n                                    collection=\"buy_settings\"\n                                    key={`buy_settings_${setting.id}`}\n                                />\n                            ))}\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"2\">\n                        Настройки заказов\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"2\">\n                        <Card.Body>\n                            {orderSettings.map((setting) => (\n                                <Form\n                                    setting={setting}\n                                    collection=\"order_settings\"\n                                    key={`order_settings_${setting.id}`}\n                                />\n                            ))}\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        </div>\n    );\n};\n","export const round = (num) => Math.round(num * 100) / 100;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { firestore } from '../utils/firebase';\nimport { Alert } from '../components/Alert';\nimport { Table } from 'react-bootstrap';\nimport { round } from '../utils/misc';\nimport { Divider, makeStyles, TextField } from '@material-ui/core';\nimport { throttle } from 'lodash';\n\nconst useStyles = makeStyles({\n    field: {\n        width: '200px',\n        margin: '10px 0',\n    },\n});\n\nexport const Buys = () => {\n    const classes = useStyles();\n\n    const [nameFilterState, setNameFilterState] = useState('');\n    const [buys, setBuys] = useState([]);\n\n    const throttled = useRef(\n        throttle((filter) => {\n            firestore\n                .collection('buys')\n                .where('item_name', '>=', filter)\n                .where('item_name', '<=', filter + '\\uf8ff')\n                .orderBy('item_name')\n                .onSnapshot((buys) => {\n                    const updatedBuys = [];\n\n                    buys.forEach((buy) => {\n                        const buyData = buy.data();\n                        const buyId = buy.id;\n\n                        updatedBuys.push({ ...buyData, id: buyId });\n                    });\n\n                    const sortedBuys = updatedBuys.sort((a, b) => b.date.seconds - a.date.seconds);\n\n                    setBuys(() => sortedBuys);\n                });\n        }, 1000),\n    );\n\n    useEffect(() => throttled.current(nameFilterState), [nameFilterState]);\n\n    const onNameFilterChangeHandler = (data) => {\n        setNameFilterState(() => data.target.value);\n    };\n\n    return (\n        <div>\n            <h1\n                className=\"text-center\"\n                style={{\n                    marginBottom: '20px',\n                }}\n            >\n                История покупок\n            </h1>\n\n            <Divider variant=\"middle\" />\n\n            <Alert />\n\n            <div style={{ display: 'flex', justifyContent: 'start' }}>\n                <TextField\n                    className={classes.field}\n                    variant=\"outlined\"\n                    label=\"Название предмета\"\n                    name=\"dateFrom\"\n                    onChange={onNameFilterChangeHandler}\n                />\n            </div>\n\n            <Divider variant=\"middle\" />\n\n            <Table striped bordered hover responsive>\n                <thead>\n                    <tr>\n                        <th>Предмет</th>\n                        <th>Дата покупки</th>\n                        <th>Покупка, руб.</th>\n                        <th>Продажа, руб.</th>\n                        <th>Профит, руб.</th>\n                        <th>Профит, %</th>\n                        <th>Продан</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {buys.map((buy) => {\n                        const id = buy.id;\n                        const itemName = buy.item_name;\n                        const date = new Date(buy.date.seconds * 1000).toLocaleString();\n                        const priceBuy = round(buy.price_buy);\n                        const priceSell = round(buy.price_sell);\n                        const priceSellWithCommission = buy.price_sell * 0.85;\n                        const profitInRub = round(priceSellWithCommission - priceBuy);\n                        const profitInPercent = round(\n                            (priceSellWithCommission - priceBuy) / (priceBuy / 100),\n                        );\n                        const isSold = buy.sold ? 'Да' : 'Нет';\n\n                        return (\n                            <tr key={id}>\n                                <td>{itemName}</td>\n                                <td>{date}</td>\n                                <td>{priceBuy}</td>\n                                <td>{priceSell}</td>\n                                <td>{profitInRub}</td>\n                                <td>{profitInPercent}</td>\n                                <td\n                                    style={{\n                                        color: buy.sold ? 'green' : 'red',\n                                    }}\n                                >\n                                    {isSold}\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        </div>\n    );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { firestore } from '../utils/firebase';\nimport { Alert } from '../components/Alert';\nimport { Table } from 'react-bootstrap';\nimport { round } from '../utils/misc';\nimport { Divider, makeStyles, TextField } from '@material-ui/core';\nimport { throttle } from 'lodash';\n\nconst useStyles = makeStyles({\n    field: {\n        width: '200px',\n        margin: '10px 0',\n    },\n});\n\nexport const Sells = () => {\n    const classes = useStyles();\n\n    const [nameFilterState, setNameFilterState] = useState('');\n    const [sells, setSells] = useState([]);\n\n    const throttled = useRef(\n        throttle((filter) => {\n            firestore\n                .collection('sells')\n                .where('item_name', '>=', filter)\n                .where('item_name', '<=', filter + '\\uf8ff')\n                .orderBy('item_name')\n                .onSnapshot((sells) => {\n                    const updatedSells = [];\n\n                    sells.forEach((sell) => {\n                        const sellData = sell.data();\n                        const sellId = sell.id;\n\n                        updatedSells.push({ ...sellData, id: sellId });\n                    });\n\n                    const sortedSells = updatedSells.sort(\n                        (a, b) => b.date.seconds - a.date.seconds,\n                    );\n\n                    setSells(() => sortedSells);\n                });\n        }, 1000),\n    );\n\n    useEffect(() => throttled.current(nameFilterState), [nameFilterState]);\n\n    const onNameFilterChangeHandler = (data) => {\n        setNameFilterState(() => data.target.value);\n    };\n\n    return (\n        <div>\n            <h1\n                className=\"text-center\"\n                style={{\n                    marginBottom: '20px',\n                }}\n            >\n                История продаж\n            </h1>\n\n            <Divider variant=\"middle\" />\n\n            <Alert />\n\n            <div style={{ display: 'flex', justifyContent: 'start' }}>\n                <TextField\n                    className={classes.field}\n                    variant=\"outlined\"\n                    label=\"Название предмета\"\n                    name=\"dateFrom\"\n                    onChange={onNameFilterChangeHandler}\n                />\n            </div>\n\n            <Divider variant=\"middle\" />\n\n            <Table striped bordered hover responsive>\n                <thead>\n                    <tr>\n                        <th>Предмет</th>\n                        <th>Дата продажи</th>\n                        <th>Покупка, руб.</th>\n                        <th>Продажа, руб.</th>\n                        <th>Профит, руб.</th>\n                        <th>Профит, %</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {sells.map((sell) => {\n                        const id = sell.id;\n                        const itemName = sell.item_name;\n                        const date = new Date(sell.date.seconds * 1000).toLocaleString();\n                        const priceBuy = round(sell.price_buy);\n                        const priceSell = round(sell.price_sell);\n                        const priceSellWithCommission = sell.price_sell * 0.85;\n                        const profitInRub = round(priceSellWithCommission - priceBuy);\n                        const profitInPercent = round(\n                            (priceSellWithCommission - priceBuy) / (priceBuy / 100),\n                        );\n\n                        return (\n                            <tr key={id}>\n                                <td>{itemName}</td>\n                                <td>{date}</td>\n                                <td>{priceBuy}</td>\n                                <td>{priceSell}</td>\n                                <td>{profitInRub}</td>\n                                <td>{profitInPercent}</td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        </div>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { firestore } from '../utils/firebase';\nimport { Alert } from '../components/Alert';\nimport { Table } from 'react-bootstrap';\nimport { Divider, makeStyles, TextField } from '@material-ui/core';\nimport moment from 'moment';\nimport { round } from '../utils/misc';\n\nconst useStyles = makeStyles({\n    field: {\n        width: '200px',\n        margin: '10px 0',\n    },\n});\n\nexport const Profits = () => {\n    const minDate = '2021-06-18';\n\n    const classes = useStyles();\n\n    const [profits, setProfits] = useState({});\n    const [generalProfit, setGeneralProfit] = useState();\n    const [datePickerState, setDatePickerState] = useState([\n        moment().subtract(7, 'day').format('yyyy-MM-DD'),\n        moment().format('yyyy-MM-DD'),\n    ]);\n\n    useEffect(() => {\n        const dateFrom = moment(datePickerState[0] + ' 00:00:00', 'yyyy-MM-DD HH:mm:ss').toDate();\n        const dateTo = moment(datePickerState[1] + ' 23:59:59', 'yyyy-MM-DD HH:mm:ss').toDate();\n\n        firestore\n            .collection('sells')\n            .where('date', '>=', dateFrom)\n            .where('date', '<=', dateTo)\n            .orderBy('date', 'desc')\n            .onSnapshot((sells) => {\n                const updatedProfits = {};\n\n                sells.forEach((sell) => {\n                    const sellData = sell.data();\n\n                    const date = new Date(sellData.date.seconds * 1000).toLocaleDateString();\n                    const profit = sellData.price_sell * 0.85 - sellData.price_buy;\n\n                    if (updatedProfits[date]) {\n                        updatedProfits[date] += profit;\n                    } else {\n                        updatedProfits[date] = profit;\n                    }\n                });\n\n                setProfits(() => updatedProfits);\n\n                const totalDays = Object.keys(updatedProfits).length;\n                const totalProfit = Object.values(updatedProfits).reduce(\n                    (sum, num) => sum + num,\n                    0,\n                );\n                const averageProfit = totalDays\n                    ? Object.values(updatedProfits).reduce((sum, num) => sum + num, 0) / totalDays\n                    : 0;\n\n                setGeneralProfit(() => ({\n                    totalDays,\n                    totalProfit,\n                    averageProfit,\n                }));\n            });\n    }, [datePickerState]);\n\n    const onDateFromChangeHandler = (data) => {\n        const newState = [...datePickerState];\n\n        newState[0] = data.target.value;\n\n        setDatePickerState(() => newState);\n    };\n\n    const onDateToChangeHandler = (data) => {\n        const newState = [...datePickerState];\n\n        newState[1] = data.target.value;\n\n        setDatePickerState(() => newState);\n    };\n\n    return (\n        <div>\n            <h1\n                className=\"text-center\"\n                style={{\n                    marginBottom: '20px',\n                }}\n            >\n                Профит\n            </h1>\n\n            <Divider variant=\"middle\" />\n\n            {generalProfit?.totalDays ? (\n                <p>\n                    Дней: {generalProfit.totalDays} <br />\n                    Всего: {round(generalProfit.totalProfit)} руб (\n                    {round(generalProfit.totalProfit * 0.85)} руб) <br />\n                    Средняя: {round(generalProfit.averageProfit)} руб (\n                    {round(generalProfit.averageProfit * 0.85)} руб)\n                </p>\n            ) : (\n                'Нет данных за этот промежуток времени'\n            )}\n\n            <Divider variant=\"middle\" />\n\n            <Alert />\n\n            <div style={{ display: 'flex', justifyContent: 'start' }}>\n                <TextField\n                    className={classes.field}\n                    variant=\"outlined\"\n                    label=\"Дата с\"\n                    type=\"date\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    value={datePickerState[0]}\n                    inputProps={{\n                        max: datePickerState[1],\n                    }}\n                    error={!datePickerState[0]}\n                    helperText={!datePickerState[0] && 'Введите начало периода'}\n                    name=\"dateFrom\"\n                    onChange={onDateFromChangeHandler}\n                    onKeyDown={(event) => {\n                        event.preventDefault();\n                    }}\n                />\n                <TextField\n                    className={classes.field}\n                    variant=\"outlined\"\n                    label=\"Дата по\"\n                    type=\"date\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    value={datePickerState[1]}\n                    inputProps={{\n                        min: datePickerState[0],\n                        max: moment().format('yyyy-MM-DD'),\n                    }}\n                    error={!datePickerState[1]}\n                    helperText={!datePickerState[1] && 'Введите конец периода'}\n                    name=\"dateTo\"\n                    onChange={onDateToChangeHandler}\n                    onKeyDown={(event) => {\n                        event.preventDefault();\n                    }}\n                />\n            </div>\n\n            <Divider variant=\"middle\" />\n\n            <Table striped bordered hover responsive>\n                <thead>\n                    <tr>\n                        <th>Дата</th>\n                        <th>Профит</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.entries(profits).map(([date, profit]) => (\n                        <tr key={date}>\n                            <td>{date}</td>\n                            <td>{round(profit)}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        </div>\n    );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => (\n    <nav className=\"navbar navbar-light navbar-expand-lg bg-light justify-content-center\">\n        <ul className=\"navbar-nav align-items-center\">\n            <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/\" exact>\n                    Общая информация\n                </NavLink>\n            </li>\n            <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/buys\">\n                    История покупок\n                </NavLink>\n            </li>\n            <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/sales\">\n                    История продаж\n                </NavLink>\n            </li>\n            <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/profits\">\n                    Профит\n                </NavLink>\n            </li>\n            <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/settings\">\n                    Настройки\n                </NavLink>\n            </li>\n        </ul>\n    </nav>\n);\n","export const SHOW_ALERT = 'SHOW_ALERT';\nexport const HIDE_ALERT = 'HIDE_ALERT';\n","import { HIDE_ALERT, SHOW_ALERT } from '../types';\n\nconst handlers = {\n    [SHOW_ALERT]: (state, { payload }) => ({ ...payload, visible: true }),\n    [HIDE_ALERT]: (state) => ({ ...state, visible: false }),\n    DEFAULT: (state) => state,\n};\n\nexport const alertReducer = (state, action) => {\n    const handle = handlers[action.type] || handlers.DEFAULT;\n    return handle(state, action);\n};\n","import React, { useReducer } from 'react';\nimport { AlertContext } from './alertContext';\nimport { alertReducer } from './alertReducer';\nimport { HIDE_ALERT, SHOW_ALERT } from '../types';\n\nexport const AlertState = ({ children }) => {\n    const [state, dispatch] = useReducer(alertReducer, { visible: false });\n\n    const show = (text, type = 'warning') => {\n        dispatch({\n            type: SHOW_ALERT,\n            payload: { text, type },\n        });\n    };\n\n    const hide = () => dispatch({ type: HIDE_ALERT });\n\n    return (\n        <AlertContext.Provider\n            value={{\n                show,\n                hide,\n                alert: state,\n            }}\n        >\n            {children}\n        </AlertContext.Provider>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { firestore } from '../utils/firebase';\nimport { Alert } from '../components/Alert';\nimport { Table } from 'react-bootstrap';\nimport { round } from '../utils/misc';\nimport moment from 'moment';\nimport firebase from 'firebase';\n\nexport const GeneralInfo = () => {\n    const [buysInfo, setBuysInfo] = useState([]);\n    const [sellsInfo, setSellsInfo] = useState([]);\n    const [generalInfo, setGeneralInfo] = useState([]);\n\n    useEffect(() => {\n        setGeneralInfo(() => [...buysInfo, ...sellsInfo]);\n    }, [buysInfo, sellsInfo]);\n\n    useEffect(async () => {\n        firestore.collection('buys').onSnapshot((buys) => {\n            const updatedInfo = [];\n\n            let totalBuys = 0;\n            let todayBuys = 0;\n\n            buys.forEach((buy) => {\n                const buyData = buy.data();\n\n                totalBuys++;\n                if (\n                    moment(buyData.date.seconds * 1000).format('yyyy-MM-DD') ===\n                    moment().format('yyyy-MM-DD')\n                ) {\n                    todayBuys++;\n                }\n            });\n\n            updatedInfo.push({ name: 'Общее число покупок', value: totalBuys });\n            updatedInfo.push({ name: 'Число покупок за сегодня', value: todayBuys });\n\n            setBuysInfo(() => updatedInfo);\n        });\n\n        firestore.collection('sells').onSnapshot((sells) => {\n            const updatedInfo = [];\n\n            let totalSells = 0;\n            let todaySells = 0;\n            let todayProfit = 0;\n            let yesterdayProfit = 0;\n            let totalProfit = 0;\n\n            sells.forEach((sell) => {\n                const sellData = sell.data();\n\n                totalSells++;\n                totalProfit += sellData.price_sell * 0.85 - sellData.price_buy;\n\n                if (\n                    moment(sellData.date.seconds * 1000).format('yyyy-MM-DD') ===\n                    moment().format('yyyy-MM-DD')\n                ) {\n                    todaySells++;\n                    todayProfit += sellData.price_sell * 0.85 - sellData.price_buy;\n                } else if (\n                    moment(sellData.date.seconds * 1000).format('yyyy-MM-DD') ===\n                    moment().subtract(1, 'day').format('yyyy-MM-DD')\n                ) {\n                    yesterdayProfit += sellData.price_sell * 0.85 - sellData.price_buy;\n                }\n            });\n\n            updatedInfo.push({ name: 'Общее число продаж', value: totalSells });\n            updatedInfo.push({ name: 'Число продаж за сегодня', value: todaySells });\n            updatedInfo.push({ name: 'Прибыль за сегодня', value: round(todayProfit) });\n            updatedInfo.push({ name: 'Прибыль за вчера', value: round(yesterdayProfit) });\n            updatedInfo.push({ name: 'Текущая прибыль', value: round(totalProfit) });\n\n            setSellsInfo(() => updatedInfo);\n        });\n    }, []);\n\n    return (\n        <div>\n            <h1\n                className=\"text-center\"\n                style={{\n                    marginBottom: '20px',\n                }}\n            >\n                Общая информация\n            </h1>\n\n            <Alert />\n\n            <Table striped bordered hover responsive>\n                <thead>\n                    <tr>\n                        <th>Показатель</th>\n                        <th>Значение</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {generalInfo.map((info) =>\n                        info ? (\n                            <tr key={info.name}>\n                                <td>{info.name}</td>\n                                <td>{info.value}</td>\n                            </tr>\n                        ) : (\n                            ''\n                        ),\n                    )}\n                </tbody>\n            </Table>\n        </div>\n    );\n};\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Settings } from './pages/Settings';\nimport { Buys } from './pages/Buys';\nimport { Sells } from './pages/Sells';\nimport { Profits } from './pages/Profits';\nimport { Navbar } from './components/Navbar';\nimport { AlertState } from './context/alert/AlertState';\nimport { GeneralInfo } from './pages/GeneralInfo';\n\nfunction App() {\n    return (\n        <AlertState>\n            <BrowserRouter>\n                <Navbar />\n                <div className=\"container py-4 mt-3 d-flex justify-content-center flex-column\">\n                    <Switch>\n                        <Route path={'/'} exact component={GeneralInfo} />\n                        <Route path={'/buys'} exact component={Buys} />\n                        <Route path={'/sales'} exact component={Sells} />\n                        <Route path={'/profits'} exact component={Profits} />\n                        <Route path={'/settings'} component={Settings} />\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        </AlertState>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}